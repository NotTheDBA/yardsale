const User = require('../../models/member')
const UserSession = require('../../models/session')

module.exports = (app) => {
    console.log("In Signin")
    app.post('/account/signup', (req, res, next) => {
        const { body } = req;
        const { firstName, lastName, password } = body;
        let { email } = body;


        if (!firstName) {
            return res.send({
                success: false,
                message: 'Error: first name cannot be blank.'
            })
        }

        if (!lastName) {
            return res.send({
                success: false,
                message: 'Error: last name cannot be blank.'
            })
        }

        if (!password) {
            return res.send({
                success: false,
                message: 'Error: password cannot be blank.'
            })
        }

        if (!email) {
            return res.send({
                success: false,
                message: 'Error: email cannot be blank.'
            })
        }

        email = email.toLowerCase();

        // steps:
        // 1) Verify email doesn't exist
        // 2) Save it
        User.find({
            email: email
        }, (err, previousUsers) => {
            if (err) {
                return res.send({
                    success: false,
                    message: 'Error: Server Error 66.'
                });
            } else if (previousUsers.length > 0) {
                return res.send({
                    success: false,
                    message: 'Error: Unable to complete Signup.'
                });
            }

            const newUser = new User();
            newUser.email = email;
            newUser.firstName = firstName;
            newUser.lastName = lastName;
            newUser.password = newUser.generateHash(password);
            newUser.save((err, user) => {
                if (err) {
                    return res.send({
                        success: false,
                        message: 'Error: Server Error 84.'
                    });
                }
                return res.send({
                    success: true,
                    message: 'Signed up.'
                });
            });
        })

    });

    app.post('/account/signin', (req, res, next) => {
        const { body } = req;
        const { password } = body;
        let { email } = body;

        if (!password) {
            return res.send({
                success: false,
                message: 'Error: password cannot be blank.'
            })
        }

        if (!email) {
            return res.send({
                success: false,
                message: 'Error: email cannot be blank.'
            })
        }

        email = email.toLowerCase();

        User.find({
            email: email
        }, (err, users) => {
            if (err) {
                return res.send({
                    success: false,
                    message: 'Error: Server Error 130.'
                });
            } else if (users.length != 1) {
                return res.send({
                    success: false,
                    message: 'Error: Invalid'
                });
            }

            const user = users[0];
            if (!user.validPassword(password)) {
                return res.send({
                    success: false,
                    message: 'Error: Invalid'
                });
            }

            //otherwise launch a session
            const userSession = new UserSession();
            userSession.userId = user._id;
            userSession.save((err, doc) => {
                if (err) {
                    return res.send({
                        success: false,
                        message: 'Error: Server Error 154.',
                        err: err
                    });
                }

                return res.send({
                    success: true,
                    message: 'Valid sign in',
                    token: doc._id
                });

            })
        });
    });

    app.get('/account/verify', (req, res, next) => {
        // get the token
        const { query } = req;
        const { token } = query;

        //verify the token
        UserSession.find({
            _id: token,
            isDeleted: false
        }, (err, sessions) => {
            if (err) {
                return res.send({
                    success: false,
                    message: 'Error: Server error 181.'
                });
            }

            if (sessions.length != 1) {
                return res.send({
                    success: false,
                    message: 'Error: Invalid.'
                });
            } else {
                return res.send({
                    success: true,
                    message: 'Good Session.'
                });
            }


        });

    });

    app.get('/account/logout', (req, res, next) => {
        // get the token
        const { query } = req;
        const { token } = query;

        //verify the token
        UserSession.findOneAndUpdate({
            _id: token,
            isDeleted: false
        }, { $set: { isDeleted: true } }, null, (err, sessions) => {
            if (err) {
                return res.send({
                    success: false,
                    message: 'Error: Server error 181.'
                });
            }

            return res.send({
                success: true,
                message: 'Logged Out.'
            });

        });

    });
};
